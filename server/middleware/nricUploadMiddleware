const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { ApiError } = require("./errorMiddleware");

// Configure storage strategy - we're using memory storage since we'll
// store the image in MongoDB, not on disk
const storage = multer.memoryStorage();

// File filter function to validate uploads
const fileFilter = (req, file, cb) => {
	// Accept images only
	if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
		return cb(
			new ApiError(
				"Only image files (jpg, jpeg, png, gif) are allowed!",
				400
			),
			false
		);
	}

	// Check mimetype as additional validation
	if (!file.mimetype.startsWith("image/")) {
		return cb(new ApiError("File must be an image!", 400), false);
	}

	cb(null, true);
};

// Initialize multer upload
const upload = multer({
	storage: storage,
	limits: {
		fileSize: 5 * 1024 * 1024, // Limit file size to 5MB
	},
	fileFilter: fileFilter,
}).single("nric_image"); // Field name for the NRIC image

/**
 * Middleware for handling NRIC image uploads
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
const nricUploadMiddleware = (req, res, next) => {
	upload(req, res, (err) => {
		if (err) {
			if (err instanceof multer.MulterError) {
				// A Multer error occurred when uploading
				if (err.code === "LIMIT_FILE_SIZE") {
					return res.status(400).json({
						message: "File size too large. Maximum size is 5MB",
					});
				}
				return res.status(400).json({
					message: `Upload error: ${err.message}`,
				});
			} else {
				// An unknown error occurred
				return res.status(err.status || 500).json({
					message: err.message || "An error occurred during upload",
				});
			}
		}

		// Check if file exists
		if (!req.file) {
			return res.status(400).json({
				message: "Please upload an image file",
			});
		}

		// File is available in req.file
		// Continue to the next middleware or route handler
		next();
	});
};

module.exports = nricUploadMiddleware;
